name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
##########################################################
jobs:
  build-backend:
    name: build back
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4


    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Build backend
      run: mvn -B package --file back/pom.xml
      
##################

  test-backend:
    name: test back
    runs-on: ubuntu-latest
    needs: build-backend
    
    steps:
    - name: Run backend tests and generate coverage report
      run: mvn test jacoco:report
      working-directory: back

    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: back/target/site/jacoco/index.html

##################
  analyse-backend:
    name: analyse back
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'zulu' # Alternative distribution options are available.
        
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: 
        mvn -B --file back/pom.xml verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pcoverage -Dsonar.projectKey=openclass-bobapp-back

##################

  build-frontend:
    name: build front
    runs-on: ubuntu-latest
       
    steps:
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install frontend dependencies
      run: npm install
      working-directory: front

    - name: Build frontend
      run: npm run build --prod
      working-directory: front

##################
  test-frontend:
   
    name: test front
    runs-on: ubuntu-latest 
    needs: build-frontend
    
    steps: 

    - name: Run tests with Karma and generate coverage
      run: npm run test -- --no-watch --code-coverage
      working-directory: ./front

    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: front/coverage/

##################
  analyse-frontend:
    name: analyse front
    runs-on: ubuntu-latest 
    needs: test-frontend
    steps: 
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env: 
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: front/



##################
  deploy:
    name: deploy
    runs-on: ubuntu-latest 
    needs: [analyse-frontend, analyse-backend]
    
    steps: 
    
    - name: Install Docker Compose
      run: |
        DOCKER_COMPOSE_VERSION=1.29.2
        sudo curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose version

    - name: Build and push Docker images
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml push
#####################

    - name: Docker Logout
      run: docker logout
