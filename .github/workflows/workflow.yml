name: CI/CD Pipeline for BobApp

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permet un déclenchement manuel

jobs:
  
  ### Étape 1 : Build et Tests du Backend ###
  build-test-backend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Build backend
      run: mvn -B package --file back/pom.xml
      
    - name: Run backend tests and generate coverage
      run: mvn test jacoco:report --file back/pom.xml
    
    - name: Upload backend coverage report
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: back/target/site/jacoco/

  ### Étape 2 : Analyse de la Qualité du Code du Backend ###
  analyse-backend:
    runs-on: ubuntu-latest
    needs: build-test-backend
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: SonarQube Scan Backend
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
           -Dsonar.projectKey=bobapp-backend -Dsonar.projectBaseDir=back

  ### Étape 3 : Build et Tests du Frontend ###
  build-test-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install frontend dependencies
      run: npm install
      working-directory: front
    
    - name: Run frontend tests and generate coverage
      run: npm run test -- --no-watch --code-coverage
      working-directory: front

    - name: Upload frontend coverage report
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage-report
        path: front/coverage/

  ### Étape 4 : Analyse de la Qualité du Code du Frontend ###
  analyse-frontend:
    runs-on: ubuntu-latest
    needs: build-test-frontend
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: SonarQube Scan Frontend
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: sonar-scanner -Dsonar.projectKey=bobapp-frontend -Dsonar.sources=front

  ### Étape 5 : Build et Déploiement Docker ###
  deploy:
    runs-on: ubuntu-latest
    needs: [analyse-backend, analyse-frontend]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/bobapp-backend:latest -f back/Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/bobapp-backend:latest
    
    - name: Build and push frontend Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/bobapp-frontend:latest -f front/Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/bobapp-frontend:latest

    - name: Docker Logout
      run: docker logout
